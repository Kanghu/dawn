{% comment %}
  This snippet creates a full-width mega menu:
  - Left column: top-level sub-links with images.
  - Right column: dynamic content that changes based on hovered left column item.

  Requirements:
  - Include this snippet in your header and pass a menu object as 'menu'.
  - menu.links should have a structure: Top Link -> Children -> Grandchildren
  - Links should point to collections if you want to display collection images.

  Example usage in header.liquid:
  {% render 'header-new-mega-menu', menu: section.settings.menu %}

{% endcomment %}

{% assign top_menu = section.settings.menu.links %}
{% if top_menu.size > 0 %}
<nav class="header__inline-menu">
  <ul class="list-menu list-menu--inline" role="list">
    {% for link in top_menu %}
      {% if link.links != blank %}
        <li class="mega-menu-parent">
          <a href="{{ link.url }}" class="header__menu-item list-menu__item link focus-inset">
            <span>{{ link.title | escape }}</span>
          </a>

          <div class="mega-menu__container">
            <div class="mega-menu__inner">
              <!-- Left column: Display child links -->
              <ul class="mega-menu__left-column" role="list">
                {% for childlink in link.links %}
                  <li class="mega-menu__left-item" data-target="{{ childlink.handle }}">
                    <a href="{{ childlink.url }}" class="mega-menu__link mega-menu__link--level-2 link">
                      {% if childlink.object and childlink.object.image %}
                        <img src="{{ childlink.object.image.src | img_url: '50x50' }}" alt="{{ childlink.title | escape }}" class="mega-menu__icon">
                      {% endif %}
                      {{ childlink.title | escape }}
                    </a>
                  </li>
                {% endfor %}
              </ul>

              <!-- Right column: Display grandchildren -->
              <div class="mega-menu__right-column">
                {% for childlink in link.links %}
                  <div class="mega-menu__right-content" data-content="{{ childlink.handle }}">
                    <ul class="mega-menu__grid" role="list">
                      {% for grandchildlink in childlink.links %}
                        <li class="mega-menu__grid-item">
                          <a href="{{ grandchildlink.url }}" class="mega-menu__link link">
                            {% if grandchildlink.object and grandchildlink.object.image %}
                              <img 
                                src="{{ grandchildlink.object.image.src | img_url: '200x200' }}" 
                                alt="{{ grandchildlink.title | escape }}" 
                                class="mega-menu__grid-image"
                              >
                            {% endif %}
                            <span class="mega-menu__grid-text">{{ grandchildlink.title | escape }}</span>
                          </a>
                        </li>
                      {% endfor %}
                    </ul>
                  </div>
                {% endfor %}
              </div>
            </div>
          </div>
        </li>
      {% else %}
        <li>
          <a
            href="{{ link.url }}"
            class="header__menu-item list-menu__item link link--text focus-inset"
            {% if link.current %}aria-current="page"{% endif %}
          >
            <span {% if link.current %}class="header__active-menu-item"{% endif %}>{{ link.title | escape }}</span>
          </a>
        </li>
      {% endif %}
    {% endfor %}
  </ul>
</nav>
{% endif %}

<style>
/* Basic Reset and Variables */
:root {
  --page-width: 1200px;
  --color-text: #333;
}

body, html {
  margin: 0;
  padding: 0;
  overflow-x: hidden; /* Prevent horizontal scroll due to full-width menu */
}

.header__inline-menu {
  position: relative;
  width: 100%;
  z-index: 99999 !important;
}

.list-menu {
  list-style: none;
  display: flex;
  gap: 1rem;
  margin: 0;
  padding: 1rem;
}

.list-menu__item {
  text-decoration: none;
  color: var(--color-text);
}

.mega-menu-parent {
  position: relative;
}

.mega-menu__container {
  position: absolute;
  top: 100%;
  left: 0;
  width: 100vw;
  background-color: #fff;
  z-index: 9999;
  display: none;
  box-shadow: 0 2px 10px rgba(0,0,0,0.1);
  max-width: var(--page-width);
  margin: 0 auto;
  padding: 1rem;
  box-sizing: border-box;
}

/* Show menu on hover of the parent */
.mega-menu-parent:hover .mega-menu__container {
  display: block;
}

.mega-menu__inner {
  display: flex;
  flex-direction: row;
  justify-content: flex-start;
  width: 100%;
  max-width: var(--page-width);
  margin: 0 auto;
  padding: 1rem;
  box-sizing: border-box;
}

.mega-menu__left-column {
  list-style: none;
  margin: 0;
  padding: 0;
  width: 20%;
}

.mega-menu__left-item {
  margin-bottom: 0.5rem;
  cursor: pointer;
}

.mega-menu__icon {
  width: 75px;
  height: 75px;
  object-fit: cover;
  margin-right: 0.5rem;
  vertical-align: middle;
}

.mega-menu__link--level-2 {
  display: flex;
  align-items: center;
  text-decoration: none;
  color: var(--color-text);
}

.mega-menu__right-column {
  flex: 1;
  padding: 0 1rem;
  box-sizing: border-box;
  position: relative;
}

.mega-menu__right-content {
  display: none; /* hidden by default */
}

.mega-menu__right-content.active {
  display: block; /* show active content */
}

.mega-menu__grid {
  display: grid;
  grid-template-columns: repeat(2, 1fr);
  grid-gap: 1rem;
  list-style: none;
  margin: 0;
  padding: 0;
}

.mega-menu__grid-item {
  text-align: center;
}

.mega-menu__grid-image {
  width: 100%;
  height: auto;
  object-fit: cover;
  aspect-ratio: 1/1;
}

.mega-menu__grid-text {
  display: block;
  margin-top: 0.5rem;
  font-size: 0.9rem;
  color: var(--color-text);
}

/* Responsive Adjustments for Smaller Screens */
@media (max-width: 768px) {
  .mega-menu__inner {
    flex-direction: column;
  }

  .mega-menu__left-column,
  .mega-menu__right-column {
    width: 100%;
  }

  .mega-menu__right-column {
    margin-top: 1rem;
  }
}
</style>

<script>
document.addEventListener('DOMContentLoaded', () => {
  const leftItems = document.querySelectorAll('.mega-menu__left-item');
  const rightContents = document.querySelectorAll('.mega-menu__right-content');

  leftItems.forEach(item => {
    item.addEventListener('mouseenter', () => {
      const target = item.getAttribute('data-target');
      
      // Hide all right content
      rightContents.forEach(content => {
        content.classList.remove('active');
      });

      // Show the matched content
      const activeContent = document.querySelector(`.mega-menu__right-content[data-content="${target}"]`);
      if (activeContent) {
        activeContent.classList.add('active');
      }
    });
  });

  // Optional: On mouse leave of parent, hide the menu
  document.querySelectorAll('.mega-menu-parent').forEach(parent => {
    parent.addEventListener('mouseleave', () => {
      rightContents.forEach(content => content.classList.remove('active'));
    });
  });
});
</script>
